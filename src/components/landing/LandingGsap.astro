<script>
  import { gsap } from 'gsap';
  import { ScrollSmoother } from 'gsap/ScrollSmoother';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  import { SplitText } from 'gsap/SplitText';

  import * as utils from './gsap-extensions/utils';

  gsap.registerPlugin(ScrollTrigger, ScrollSmoother, SplitText);

  ////////////////////////////
  // BOOTSTRAP              //
  ////////////////////////////

  utils.boostrapGsapExtensions();

  // Bind ScrollSmoother
  const smoothScroller = ScrollSmoother.create({
    smooth: 1,
    effects: true,
  });

  // Register Timelines
  const heroTimeline = gsap.timeline({ paused: true });
  const resumeTimeline = utils.registerBoxTimeline('gsapBoxResume');
  const aboutTimeline = utils.registerBoxTimeline('gsapBoxAbout');
  const skillsTimeline = utils.registerBoxTimeline('gsapBoxSkills');
  const experienceTimeline = utils.registerBoxTimeline('gsapBoxExperience');
  const projectsTimeline = utils.registerBoxTimeline('gsapBoxProjects');
  const contactTimeline = utils.registerBoxTimeline('gsapBoxContact');

  // Store reference to the static background div and ensure it has got the correct base color
  const background = document.querySelector('#landing-background');
  gsap.set(background, {
    backgroundColor: 'rgb(240, 171, 252)', // Tailwind's bg-fuchsia-300
  });

  ////////////////////////////
  // NAVIGATION BAR         //
  ////////////////////////////

  // Ensure Initial CSS Variable is Set
  gsap.set('.progress-link', {
    '--scaleBackground': 0,
  });

  // Bind Each Section to their Respective Timeline
  resumeTimeline.registerProgressItemOnTimeline('#progressLinkResume');
  aboutTimeline.registerProgressItemOnTimeline('#progressLinkAbout');
  skillsTimeline.registerProgressItemOnTimeline('#progressLinkSkills');
  experienceTimeline.registerProgressItemOnTimeline('#progressLinkExperience');
  projectsTimeline.registerProgressItemOnTimeline('#progressLinkProjects');
  contactTimeline.registerProgressItemOnTimeline('#progressLinkContact');

  // Bind AutoScroll Behavior to the Navigation Links
  document
    .querySelectorAll<HTMLAnchorElement>('a.progress-link-anchor')
    .forEach((a) => {
      a.addEventListener('click', (e) => {
        if (e) {
          e.preventDefault();
        }

        gsap.to(smoothScroller, {
          scrollTop: Math.min(
            ScrollTrigger.maxScroll(window),
            smoothScroller.offset(a.hash, 'top')
          ),
          duration: 1.25,
          ease: 'power1.inOut',
        });
      });
    });

  ////////////////////////////
  // FIRST BOX (HERO)       //
  ////////////////////////////

  // Create SplitText Objects for Hero Text
  SplitText.create('#hero-title', {
    type: 'chars',
    autoSplit: true,
    smartWrap: true,
    aria: 'auto',
    onSplit: (self) => {
      // Set invisible container to be visible
      gsap.set('#hero-title', { autoAlpha: 1 });

      // Execute title animation
      gsap.from(self.chars, {
        x: 50,
        opacity: 0,
        duration: 1,
        ease: 'power1.inOut',
        stagger: 0.04,
      });

      // Execute the remainder of hero timeline
      heroTimeline.play();
    },
  });

  // Add hero subtitle and navigation links to the timeline
  heroTimeline
    .fromTo(
      '#hero-subtitle',
      { y: 15 },
      {
        y: 0,
        autoAlpha: 1,
        duration: 1,
        ease: 'power1.inOut',
        delay: 0.75,
      }
    )
    .fromTo(
      '#hero-links',
      { y: 15 },
      {
        y: 0,
        autoAlpha: 1,
        duration: 1,
        ease: 'power1.inOut',
        delay: -0.75,
      }
    );

  aboutTimeline.addLabel('startAboutTimeline').to(
    background,
    {
      backgroundColor: 'rgb(255, 0, 0)',
      duration: 1,
      ease: 'none',
    },
    0
  );

  skillsTimeline.addLabel('startSkillsTimeline').to(
    background,
    {
      backgroundColor: 'rgb(0, 0, 255)',
      duration: 1,
      ease: 'none',
    },
    0
  );
</script>
